#include <stdio.h>

int length(char* pstr);	// 함수 length를 선언. char*는 문자형 포인터이다. 문자형 포인터 또한 메모리 번지를 저장하기 위한 변수이다.

int main()
{
	int len = length("abcde");	// abcde의 길이를 구할 함수 length()를 호출한다. 호출 시 전달 값으로 사용되는 문자열 "abcde"를 문자형 포인터 변수 pstr이 전달받으며, 이때 문자열 전체가 아닌 첫 번째 문자의 번지만을 전달받는다. 변수의 번지를 전달하기 위해서는 &를 사용하지만, 문자열은 그 자체가 번지에 대한 표현이므로 번지 연산자를 사용할 필요가 없다.

	printf("길이 = %d", len);	// 길이 = 5
}

int length(char* pstr)
{
	int len = 0;

	while (*pstr != NULL)	// 포인터 변수의 값을 읽기 위해서는 간접 지정 연산자*를 사용하므로, *pstr은 pstr이 가리키는 번지에 저장되어 있는 값을 의미하며, pstr은 문자열의 선두 번지를 가리키고 있기 때문에, pstr의 번지가 1씩 증가함에 따라 *pstr의 값은 'a', 'b', 'c', 'd', 'e', '\0'처럼 된다. while 조건 반복문은 조건식이 참인 동안 실행되며, 문자열의 끝을 의미하는 널 문자(\0)는 값이 0이기 때문에 조건식이 거짓이 되어 while 문이 종료된다.
	{
		pstr++;	// pstr의 번지를 1만큼 증가
		len++;	// 문자열의 길이를 1만큼 증가
	}

	return len;
}

/*
- 문자 'a'가 저장된 번지를 1000번지라고 가정한다면, 문자 'b'는 1001번지, 문자 'c'는 1002번지 순으로 저장된다.
- 7번째 줄의 length("abcde")에서 문자열 abcde는 문자형 포인터 변수 pstr에 그 선두 번지인 1000번지를 전달한다.
- 더블 퀘테이션으로 둘러 싸인 모든 문자열의 끝은 항상 널(NULL)로 종료된다.
- 문자형 포인터(char*)는 문자열을 다루기 위해 거의 필수적으로 사용된다. 일반 변수에 대한 증감 연산자 사용 시 모든 값은 1이 증가 또는 감소되지만, 포인터 변수에 대한 증감 연산자는 포인터가 가리키는 데이터형의 크기만큼 증가된다. char*는 1, int*는 4, 구조체는 구조체의 크기만큼 증감된다.
- 문자열 또는 문자형 배열은 증감 연산자 사용 시 무조건 1씩 증감된다.
*/
